import { fileURLToPath } from 'url';
import { defineNuxtModule, addTemplate, addServerHandler } from '@nuxt/kit';
import { join } from 'pathe';
import { defu } from 'defu';
import dedent from 'dedent';

const module = defineNuxtModule({
  meta: {
    name: "nuxt-proxy",
    configKey: "proxy"
  },
  defaults: {},
  setup(options, nuxt) {
    const runtimeDir = fileURLToPath(new URL("./runtime", import.meta.url));
    nuxt.options.build.transpile.push(runtimeDir, "#build/proxy-handler");
    const finalConfig = nuxt.options.runtimeConfig.proxy = defu(nuxt.options.runtimeConfig.proxy, options);
    addTemplate({
      filename: "proxy-handler.ts",
      write: true,
      getContents: () => dedent`
        import { createProxyMiddleware } from 'nuxt-proxy/middleware'
        
        export default createProxyMiddleware(${JSON.stringify(finalConfig)})
      `
    });
    addServerHandler({
      handler: join(nuxt.options.buildDir, "proxy-handler.ts"),
      middleware: true
    });
  }
});

export { module as default };
